#pragma once

/**
* Структура Date сдержит три поля типа int, 
* в которых хранится инфорция о дате рождения элемента списка.
**/
typedef struct {
	int day;
	int month;
	int year;
} Date;

/**
* Структура Profile сдержит три поля типа char*, 
* в которых хранится инфорция о фамилии, имени и отчестве элемента списка.
**/
typedef struct {
	char* surname;
	char* name;
	char* patronymic;
} Profile;

/**
* Структура List сдержит три поля типа Profile*, Date* и List*,
* в которых хранится следующая инфорция: фио, дата рождения элемента списка и указатель на следующий элемент.
**/
typedef struct List {
	Profile* profile;
	Date* date;
	struct List* next;
} List;

/**
* StringCounter:
* Функция для подсчета строк в файле.
* На вход получает название файла (переменная типа char const*).
* Возвращает количество строк в файле.
**/
int StringCounter(char const* f);

/**
* Lettercheck:
* Функция проверки символа.
* На вход поступает переменная типа char.
* Возвращает 1, если символ является буквой, в противном случае - 0.
**/
int Lettercheck(char c);

/**
* CompareStructures:
* Функция сравнения двух структур, содержащих даты.
* На вход поступают две структуры типа Date*.
* Возвращает 1/0/-1, если дата, содержащаяся в первой структуре, </=/>, даты, содержащейся во второй структуре, соотвественно.
* Пояснение работы функции:
* Первым шагом сравнивается года (поля year), 
* если они равны, переходим к сравнению месяцев (поля month), 
* если они равны, переходим к сравнению дней (поле day).
**/
int CompareStructures(Date* date_current, Date* date_next);

/**
* Insert:
* Функция вставки нового элемента в список.
* На вход поступают два поля структуры элемента типа Profile* и Date* и список типа List**.
* Пояснение работы функции:
* В цикле проходимся по всем элементам списка,
* с помощью функции сравнения CompareStructures сравниваем дату каждого элемента списка с датой нового элемента для вставки.
* Цикл завершает свою работу, когда дойдет до последнего элемента, у которого дата рождения меньше, чем у элемента для вставки, 
* или когда дойдет до конца списка. В результате цикл запоминает элемент списка, после которго нужно вставить элемент для вставки.
* Если все элементы списка больше элемента для вставки, то этот элемент вставляется в начало списка.
**/
void Insert(Profile* profile, Date* date, List** list);

/**
* CreateListFromFile:
* Функция считывания элементов из файла и создания отсортированного списка из считанных элементов.
* На вход поступают название txt файла (переменная типа char const*) и количество строк в этом файле.
* Возвращает отсортированный список типа List*.
* Пояснение работы функции:
* В цикле из каждой строки считываются ФИО и дата рождения и записываются в соответствующие поля созданной структуры элемента списка, 
* каждый считанный элемент с помощью функции вставки Insert сразу занимает нужное место в списке 
* так, чтобы в итоге получился список, отсортированный по возрастанию даты рождения (от старшего к младшему)
**/
List* CreateListFromFile(char const* filename, int k);

/**
* ListIsEmpty:
* Функция проверки существования списка.
* На вход получает указатель на список (переменная типа List*).
* Возвращает 1, если список пуст, в противном случае - 0.
**/
int ListIsEmpty(List* list);

/**
* PrintStructureList:
 * Функция вывода на экран одного элемента из списка.
 * На вход получает структуру типа List*.
 **/
void PrintStructureList(List* list);

/**
* PrintWholeList:
* Функция вывода на экран целого списка из структур типа List*.
* На вход поступает список типа List*.
* Пояснение работы функции:
* Используются две вспомогательные функции:
* PrintStructureList - для вывода на экран кааждого элемента списка,
* ListIsEmpty - для проверки, не пустой ли файл.
**/
void PrintWholeList(List* list);

/**
* CheckDate:
* Функция для поиска элементов списка с заданным полем Date.
* На вход поступают список типа List* и структура типа Date*.
* Возвращает количество элементов исходного списка, у которых поле Date совпадает с заданным, и список из этих элементов,
* при их отсутствии возвращает только количество, равное 0.
**/
void CheckDate(List* list, Date* input_date);

/**
* InputDate:
* Функция считывания даты с экрана.
* Возвращает структуру типа Date*, которая содержит в своих полях следующую информацию: день, месяц, год.
**/
Date* InputDate()
