#pragma once;

/**
* структура, содержащая в полях день, месяц и год раждения соответственно
* нужна для составления структуры поля списка
**/

typedef struct Date {
	int day;
	int month;
	int year;
} Date;

/**
* структура, содержащая в полях имя, фамилию и  отчество соответственно
* нужна для составления структуры поля списка
**/
typedef struct Profile {
	char* surname;
	char* name;
	char* patronymic;
} Profile;

/**
* структура, представляет собой поле списка
* содержит в себе структуру с ФИО, структуру с полной датой рождения и указатель на следующее поле списка типа List*
**/
typedef struct List_t {
	Profile* profile;
	Date* date;
	struct List_t* next;
} List;

/**
* функция CompareStructures сравнивает последовательно год, месяц и день рождения
* на вход поступают две структуры типа Date*
* возвращается значение типа int 1, 0 или -1
* 1: next > current
* -1: next < current
* 0: next = current
**/
int CompareStructures(Date* date_current, Date* date_next);

/**
* функция PrintListField выводит на экран поля структуры типа List*
* на вход поступает структура типа List*
* значение не возвращается
* каждое поле структуры типа Profile* выводится посимвольно в цикле
* поля структуры типа Date* выводятся функцией printf
**/
void PrintListField(List* list);

/**
* функция PrintListComplited выводит на экран полный список из нескольких структур типа List*
* на вход поступает структура типа List*
* значение не возвращается
* в случае остутсвия полей списка в итоговом списке на экран выводится "empty list"
**/
void PrintListComplited(List* list);

/**
* функция SymbolCheck осуществляет проверку символа типа char
* на вход поступает символ типа char
* возвращается значение типа int 1 или 0
* 1 - символ является буквой в английской раскладке верхнего или нижнего регистра
* 0 - символ  не является буквой в английской раскладке верхнего или нижнего регистра
**/
int SymbolCheck(char c);

/**
* функция InsertListField вставляет текущее поле списка в нужное место списка
* на вход поступают две структуры типа Profile* и Date* и указатель на структуру типа List* (исходный список)
* значение не возвращается
* создаем поле списка List* new из полей стуктур входных данных и List* cur - указатель на текущее положение в исходном списке
* перемещаясь по списку с помощью cur, подыскиваем место для вставки new в исходный список
* вспомогательная функция CompareStructures сравнивает даты двух соседних полей списка
**/
void InsertListField(Profile* profile, Date* date, List** inp);

/**
* функция AlterationListFromFile считывает данные из txt файла и сразу формирует список в нужном порядке
* на вход поступает название txt файла типа char const* и количество строк в файле
* возвращается структура типа List*
* в цикле (пока не закончатся строки) ситываются ФИО и дата рождения для каждого поля списка
* так же в цикле вызывается функция InsertListField для каждого поля списка
**/
List* AlterationListFromFile(char const* filename, int board);

/**
* функция StrCounter считает количество строк в исходном txt файле
* на вход поступает название txt файла типа char const*
* возвращается количество строк
**/
int StrCounter(char const* filename);

/**
* функция CheckDate проверяет наличие введенной с клавиатуры даты рождения в отсорированном списке
* на вход поступает список типа List* и структура типа Date* с датой рождения 
* значение не возвращается
**/
void CheckDate(List* list, Date* input_date);

/**
* функция InputFromScreen просит пользователя ввести с клавиатуры дату рождения поэтапно
* на вход ничего не подается
* возвращается структура типа Date* с датой рождения
**/
Date* InputFromScreen();
