#pragma once

/**
* Структура Point сдержит два поля типа int,
* в которых хранится инфорция о координатах некоторой точки (x,y).
**/
typedef struct Point {
	int x;
	int y;
} Point;

/**
* Структура List сдержит два поля типа Point* и List_t*,
* в которых хранится инфорция о координатах некоторой точки и указатель на следующий элемент списка.
**/
typedef struct List_t {
	Point* point;
	struct List_t* next;
} List;

/**
* RoundDown:
* Функция для округления вещественного числа вниз.
* На вход получает переменную типа double.
* Возвращает округленное значение исходной переменной типа int.
**/
int RoundDown(double r);

/**
* InsertToList:
* Функция добавления нового элемента в конец списка.
* На вход получает переменные типа Point* и List** - координаты точки для нового элемента списка и исходный список соответственно.
**/
void InsertToList(Point* point, List** list);

/**
* CreateListFromFile:
* Функция создания списка элементов, считываемых из файла.
* На вход получает переменную типа char const* - имя файла.
* Возвращает переменную типа List* - указатель на первый элемент списка.
* Для добавления каждого нового элемента используется вспомогательная функция InsertToList
**/
List* CreateListFromFile(char const* filename);

/**
* CreateListField:
* Функция создания элемента списка.
* На вход получает две переменные типа int - координаты точки (x,y).
* Возвращает переменную типа List* - указатель на новый элемент.
**/
List* CreateListField(int x, int y);

/**
* Min:
* Функция поиска минимальной координаты x/y.
* На вход получает переменную типа List* - список из точек (x,y),
* и две переменные типа int, содержащие флаги, указывающие на то, с какой координатой функция будет работать.
* Возвращает переменную типа int - минимальную координату x/y.
**/
int Min(List* dots, int flag_x, int flag_y);

/**
* Max:
* Функция поиска максимальной координаты x/y.
* На вход получает переменную типа List* - список из точек (x,y),
* и две переменные типа int, содержащие флаги, указывающие на то, с какой координатой функция будет работать.
* Возвращает переменную типа int - максимальную координату x/y.
**/
int Max(List* dots, int flag_x, int flag_y);

/**
* FormArray:
* Функция формирования массива списков.
* На вход получает переменную типа List* - список из точек (x,y) для определения размера массива.
* Возвращает переменную типа List** - массив необходимого размера (количество ячеек равно количеству взятых игреков), каждая ячейка которого равна NULL.
* Используются вспомогательные функции Min и Max для определения количества взятых игреков (Max-Min+1).
**/
List** FormArray(List* dots);

/**
* PrintArray:
* Функция вывода массива списков на экран.
* На вход получает переменную типа List** - массив списков, и две переменные типа int - размеры массива.
* Не используется в программе, была создана для проверки работы алгоритма и поиска ошибок.
**/
void PrintArray(List** Array, int n, int m);

/**
* InsertPointToArray:
* Функция добавления новой точки, обозначающая координаты клетки, которая впоследствии будет закрашена, в массив списков.
* На вход получает переменную типа List** - массив списков, две переменные типа int - координаты новой точки,
* переменную типа List* - список точек для нахождения минимального игрека и получения зависимости индексов ячеек массива от имеющихся угреков.
* Используются вспомогательные функции CreateListField - для создания одного элемента списка, и Min - для получения минимального игрека.
**/
void InsertPointToArray(List** Array, int x, int y, List* dots);

/**
* InsertLineToArray:
* Функция добавления координат клеток, через которые проходит некоторая прямая, полученная по двум точкам из исходного списка, в массив списков.
* На вход получает переменную типа List** - массив списков, две переменные типа Point* - координаты двух точек из исходного списка, по которым будет строиться прмая,
* переменную типа List* - исходный список точек.
* Пояснение работы функции:
* Находим коэффициент наклона прямой из уравнения прямой, проходящей через две точки;
* в зависимости от коэффициента проходимся в цикле по x/y  и находим соответствующие им вторые координаты,
* с помощью вспомогательной функции RoundDown округляем найденные нецелые x/y, чтобы найти координаты клетки, которая впоследствии будет закрашена,
* с помощью вспомогательной функции InsertPointToArray добавляем точку с найденными координатами в массив списков;
* также в зависимости от коэффициента в  некоторых прямых координаты, полученные целыми необходимо убавить на один, чтобы не захватить ненужную клетку;
* отдельно рассматриваем случай нулевого коэффициента наклона (горизонтальная/вертикальная прямая,те иксы или игреки совпадают).
* Используются вспомогательные функции CreateListField - для создания одного элемента списка, и Min - для получения минимального игрека.
**/
void InsertLineToArray(Point* point1, Point* point2, List** Array, List* dots);

/**
* CreateMatrix:
* Функция создания матрицы в виде двумерного массива заданного размера.
* На вход получает две переменные типа int - размеры двумерного массива.
* Возвращает переменную типа int** - массив заданного размеры, каждая ячейка которого равна 0.
**/
int** CreateMatrix(int n, int m);

/**
* FillingMatrix:
* Функция заполнения матрицы, содержащей границы исходного многоугольника в виде 1.
* На вход получает две переменные типа int - размеры двумерного массива, и переменную типа int** - двумерный массив.
* Пояснение работы функции:
* Функция проходится по всем ячейкам массива, подвергая ячейки равные 0 проверке на нахождение внутри границ многоугольника;
* с помощью нескольких циклов осуществляется движение во все стороны от подозрительной на закращивание клетки,
* если со всех сторон нашлась ячейка, содержащая 1, клетка закрашивается.
**/
void FillingMatrix(int** A, int n, int m);

/**
* PrintMatrix:
* Функция вывода двумерного массива на экран.
* На вход получает переменную типа int** - двумерный массив, и две переменные типа int - размеры массива.
**/
void PrintMatrix(int** Matrix, int n, int m);

/**
* CompleteMatrix:
* Функция формирования матрицы с закрашенными клетками (1), соответвующим "пиксельному изображению" многоугольника с заданными вершинами.
* На вход получает переменную типа List** - массив списков с ячейками равными NULL,
* и переменную типа List* - список точек, которыми задаются вершины многоугольника.
* Пояснение работы функции:
* В цикле необходимо пройтись по всему массиву списков, содержащему координаты клеток контура фигуры,
* и закрасить (приравнять 1) все ячейки матрицы, соответствующие этим координатам.
* Используются вспомогательные функции:
* Min и Max - для определения границ матрицы;
* CreateMatrix - для создания матрицы заданного размера;
* FillingMatrix - для заполнения внутренней части будущего "пиксельного изображения";
* PrintMatrix - для вывода полученной матрицы, отражающей "пиксельное изображение" многоугольника на экран.
**/
void CompleteMatrix(List** Array, List* dots);

/**
* ActionOnFile:
* Функция считывания координат вершин многоугольника из файла и формирования матрицы, отражающей "пиксельное изображение" многоугольника.
* На вход получает переменную типа char const* - имя файла, содержащего координаты вершин многоугольника.
* Пояснение работы функции:
* В цикле необходимо пройтись по всему массиву списков, содержащему координаты клеток контура фигуры,
* и закрасить (приравнять 1) все ячейки матрицы, соответствующие этим координатам.
* Используются вспомогательные функции:
* CreateListFromFile - создание списка элементов, в которых хранится информация о координатах вершин многоугольника;
* FormArray - создание массива списков;
* InsertLineToArray - добавление в массив точек, которые пересекает каждая сторона многоугольника
* (таким образом, мы получаем координаты клеток, образуюзих контур фигуры);
* CompleteMatrix - создание и вывод на экран матрицы, отражающей "пиксельное изображение" многоугольника (1 - закрашенная клетка, 0 - незакрашенная).
**/
void ActionOnFile(char const* filename);