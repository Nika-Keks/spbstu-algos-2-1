#pragma once

/*
* функция Size_X возвращает количество столбиков в матрице лабиринта из файла
* на вход поступают файл FILE* file, открытый для чтения
* возвращается int length_col - количество столбиков
*/
int Size_X(FILE* file);

/*
* функция Size_Y возвращает количество строк в матрице лабиринта из файла
* на вход поступают файл FILE* file, открытый для чтения
* возвращается int length_row - количество строк
*/
int Size_Y(FILE* file);

/*
* функция CheckNode возвращает логическое значение 1 или 0
* на вход посупают int x, int y, int** visited, int** matrix, int n, int m
* соответственно:
* "координаты" входа в лабиринт (х, у),
* указатель на двумерный динамический массив, в которым хранятся данные об уже посещенных клетках (1 - посещенная, 0 - непосещенная),
* указатель на матрицу лабиринта,
* размеры матрицы лабиринта, посчитанные с помощью Size_X и Size_Y
* возвращается 0 или 1
*/
int CheckNode(int x, int y, int** visited, int** matrix, int n, int m);


/*
* функция Visit - рекурсивная, осуществляет подсчет минимальной длины пути в лабиринте:
* проверяет сначала клетку снизу: в случае, если нельзя перейти в клетку снизу,
* проверяет клетку справа, затем, аналогично, слева и сверху; с помощью рекурсивного алгоритма проверяет все подходящие для посещения узлы.
* на вход поступают int x, int y, int end_x, int end_y, int** visited, int length, int** matrix, int* min_length
* сответственно:
* "координаты" узла матрицы лабиринта, 
* "координаты" вызода из лабиринта,
* указатель на двумерный динамический массив, в которым хранятся данные об уже посещенных клетках (1 - посещенная, 0 - непосещенная),
* длинна пути,
* указатель на матрицу лабиринта,
* указатель на переменную min_length, которая будет изменяться глобально
* значение не возвращается - в ходе исполнения функции меняется значение min_length
*/
void Visit(int x, int y, int end_x, int end_y, int** visited, int length, int** matrix, int* min_length);

/*
* функция CreateArray создает двумерный динамический массив заполненный ноликами
* на вход поступают размеры массива int n, int m
* возвращается указатель на созданный массив
*/
int** CreateArray(int n, int m);

/*
* функция FreeArray чистит памаять, выделенную под двумерный динамический массив
* на вход поступает указатель на массив, который нужно очистить - int** Array и размер поодной из сторон - int n
* значение не возвращается
*/
void FreeArray(int** Array, int n);

/*
* функция PrintMatrix выводит на экран матрицу
* на вход подается int** Matrix - матрица для вывода
* int n, int m - размеры матрицы
* значение не возвращается
*/
void PrintMatrix(int** Matrix, int n, int m);

/*
* функция CreateArrayFromFile создает двумерный динамический массив, считывает посимвольно элементы типа char из файла
* и в зависимости от того, какой символ считан: '0' или '1', заполняет массив из ноликов единичками в соответствии с данными файла
* на вход поступают FILE* file, int n, int m
* соответственно:
* сам файл
* размеры матрицы
* возвращается указатель на созданный массив
*/
int** CreateArrayFromFile(FILE* file, int n, int m);

/*
* функция FindPath - основная для вызова в мейне:
* в ней инициализируем переменные, созаем два дмумерных динамических массива visited и matrix
* очищаем память и закрываем файл
* значение не возвращается
*/
void FindPath(char const* filename);
