#include <stdio.h>
#pragma once

/*
* NumberOfColumns:
* Функция подсчета количества столбцов в матрице.
* На вход получает переменную типа FILE* - файл с матрицей.
* Возвращает переменную типа int - количество столбцов в матрице.
*/
int NumberOfColumns(FILE* file);

/*
* NumberOfLines:
* Функция подсчета количества строк в матрице.
* На вход получает переменную типа FILE* - файл с матрицей.
* Возвращает переменную типа int - количество строк в матрице.
*/
int NumberOfLines(FILE* file);

/*
* CellControl:
* Функция контроля клетки - проверяет, можем ли мы посетить данную клетку лабиринта.
* На вход получает четыре переменные типа int - координаты клетки и границы матрицы лабиринта,
* две переменные типа int** - матрицу ходов и матрицу лабиринта.
* Возращает переменную типа int - некий флаг, разрешающий или запрещающий проход в данную клетку.
*/
int CellControl(int x, int y, int** steps, int** lab, int n, int m);

/*
* RecursivePass:
* Функция рекурсивного прохода матрицы лабиринта.
* На вход получает переменные типа int - координаты клетки старта и финиша, длину пути, 
* переменную типа *int - минимальную полученную длину пути от старта до финиша,
* две переменные типа int** - матрицу ходов и матрицу лабиринта.
*/
void RecursivePass(int x, int y, int end_x, int end_y, int** steps, int length, int** lab, int* min_length);

/*
* CreateMatrix:
* Функция создания нулевой матрицы по заанным границам.
* На вход получает две переменные типа int - границы матрицы.
* Возвращает переменную типа int** - полученную матрицу.
*/
int** CreateMatrix(int n, int m);

/*
* PrintMatrix:
* Функция вывода матрица на экран.
* На вход получает две переменные типа int - границы матрицы, и переменную типа int** - матрицу.
*/
void PrintMatrix(int** matrix, int n, int m);

/*
* CreateMatrixFromFile:
* Функция считывания матрицы заданного размера из файла.
* На вход получает две переменные типа int - границы матрицы, и переменную типа FILE* - файл с матрицей.
* Возвращает переменную типа int** - готовую матрицу.
*/
int** CreateMatrixFromFile(FILE* file, int n, int m);

/*
* MazePassage:
* Общая функция для нахождения минимальной длины прохода лабиринта.
* На вход получает переменную типа FILE* - файл с матрицей лабиринта.
* Запрашивает координаты точки старта и находит минимальную длину пути до выхода из лабиринта.
*/
void MazePassage(char const* filename);